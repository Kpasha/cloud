import java.util.Properties

import common.{PostgresCommon, SparkCommon}
import org.apache.spark.sql.{DataFrame, SparkSession}
import org.slf4j.LoggerFactory

object FutureXSparkTransformer {

  private val logger = LoggerFactory.getLogger(getClass.getName)

  def main(args: Array[String]): Unit = {
    try {
      logger.info("main method started")
      logger.warn("This is a warning")
      val spark = SparkCommon.createSparkSession().get
      SparkCommon.readDataFromHive(spark)
      //SparkCommon.createHiveTable(spark)

      //SparkCommon.populateHiveTable(spark)
      //val pgTable = "futureschema.futurex_course_catalog"
      //val pgCourseDataframe : DataFrame = PostgresCommon
      //  .fetchDataFrameFromPgTable(spark,pgTable).get
      //logger.info("Fetched PG DataFrame...logger")
      //pgCourseDataframe.show()

    } catch {
      case e:Exception =>
        logger.error("An error has ocured in the main method "+ e.printStackTrace())
    }


  }
}
